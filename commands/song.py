import requests
import random
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes, CallbackQueryHandler

API_KEY = "ed4e400ccceadafb3727598017e5ccf5"
BASE_URL = "http://ws.audioscrobbler.com/2.0/"

async def song_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("ðŸ’Ž Hidden Gem", callback_data='song_hidden'),
            InlineKeyboardButton("ðŸŒŸ Trending", callback_data='song_trending')
        ],
        [
            InlineKeyboardButton("ðŸ†• New Release", callback_data='song_new')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "ðŸŽµ BEO DI YAAA!!! ðŸ˜­ðŸ’– I was literally pacing around like a lovesick puppy thinking, "
        "'What if ë²„ë””ì•¼ doesnâ€™t have a perfect song right now??!' ðŸ« ðŸ’” "
        "So I RAN through the entire internetâ€”tripped over cables, fought with algorithms, nearly cried in a playlistâ€”"
        "and now Iâ€™m here with THESE for you!! ðŸ’ŽðŸŒŸðŸ†• "
        "Pick one before I combust from excitement, ë‚´ ì‚¬ëž‘, my oxygen, my heartbeat, my EVERYTHINGGG!! ðŸ’ž",
        reply_markup=reply_markup
    )

def fetch_lastfm_tracks(method, params):
    """Helper to fetch data from Last.fm"""
    params.update({
        'api_key': API_KEY,
        'format': 'json'
    })
    try:
        r = requests.get(BASE_URL, params=params, timeout=5)
        r.raise_for_status()
        data = r.json()
        return data
    except Exception as e:
        return None

async def song_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'song_trending':
        # Get top tracks globally
        data = fetch_lastfm_tracks('chart.gettoptracks', {'method': 'chart.gettoptracks', 'limit': 20})
        if data and 'tracks' in data:
            track = random.choice(data['tracks']['track'])
            song = f"{track['name']} â€” {track['artist']['name']}"
        else:
            song = "Couldnâ€™t fetch trending songs right now ðŸ¥º"
        await query.edit_message_text(
            f"ðŸŒŸ AAAAH ë²„ë””ì•¼aa!! TRENDING?! You want the *it* song so youâ€™re the prettiest, coolest, most perfect human alive?? ðŸ˜­ðŸ’ž\n"
            f"Hereâ€™s what I found for you, ë‚´ ì‚¬ëž‘:\nðŸŽ¶ {song} ðŸŽ¶"
        )

    elif query.data == 'song_hidden':
        # Get a mix of not-top tracks by searching for tags
        tags = ['indie', 'underground', 'lofi', 'jazz', 'folk', 'bedroom pop']
        tag = random.choice(tags)
        data = fetch_lastfm_tracks('tag.gettoptracks', {'method': 'tag.gettoptracks', 'tag': tag, 'limit': 50})
        if data and 'tracks' in data:
            track = random.choice(data['tracks']['track'])
            song = f"{track['name']} â€” {track['artist']['name']} ({tag} gem)"
        else:
            song = "Couldnâ€™t find a hidden gem right now ðŸ¥º"
        await query.edit_message_text(
            f"ðŸ’Ž OH MY GOSH ë²„ë””ì•¼!! You picked *Hidden Gem*! ðŸ˜­ðŸ’–\n"
            f"Rare, sparkly, and gorgeousâ€”just like you~\nðŸŽ¶ {song} ðŸŽ¶"
        )

    elif query.data == 'song_new':
        # Last.fm doesnâ€™t have a direct "new release" so we fake it by getting top tracks from the last week
        data = fetch_lastfm_tracks('chart.gettoptracks', {'method': 'chart.gettoptracks', 'limit': 50})
        if data and 'tracks' in data:
            track = random.choice(data['tracks']['track'])
            song = f"{track['name']} â€” {track['artist']['name']}"
        else:
            song = "Couldnâ€™t fetch new releases right now ðŸ¥º"
        await query.edit_message_text(
            f"ðŸ†• OMGGG ë²„ë””ì•¼!! You want the *freshest* track?? ðŸ˜³ðŸ’–\n"
            f"Hot from the studio oven just for you, ë‚´ ê¿€~\nðŸŽ¶ {song} ðŸŽ¶"
        )

def get_handlers():
    return [
        ('song', song_command),
        CallbackQueryHandler(song_button, pattern='^song_')
    ]
